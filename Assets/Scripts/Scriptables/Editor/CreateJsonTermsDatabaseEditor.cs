//Diadrasis Â©2023
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace Diadrasis.Rethymno 
{
#if UNITY_EDITOR
	[CustomEditor(typeof(JsonTermsDatabase))]
	public class CreateJsonTermsDatabaseEditor : Editor
	{
		private JsonTermsDatabase script;

		Color colDefault;
		private GUIStyle style;

		private void OnEnable()
		{
			script = (JsonTermsDatabase)target;

			style = new GUIStyle();
			style.normal.textColor = Color.white;
			style.alignment = TextAnchor.MiddleLeft;
			style.fontSize = 12;
		}

		public override void OnInspectorGUI()
		{
			serializedObject.Update();

			base.OnInspectorGUI();

			EditorGUI.BeginChangeCheck();

			if (script.IsJsonMissing())
			{
				GUILayout.Space(20);
				style.fontSize = 19;
				style.normal.textColor = Color.cyan;
				GUILayout.Label("Please first assign the json file!", style);
				GUILayout.Space(30f);
				style.fontSize = 12;
				style.normal.textColor = Color.white;
				return;
			}

			GUILayout.Space(15);
			GUILayout.Label("Use bellow button to read the json files.", style);
			GUILayout.Label("This will create the terms database.", style);
			GUILayout.Label("Also a new script will be created in Assets/Scripts/Enums/AutoGenerated", style);
			GUILayout.Label("With the name <color=cyan>"+script.EnumFieldName +".cs</color> and the new enum variable.", style);
			GUILayout.Label("Use this enum to easily find a term key for texts", style);
			GUILayout.Label("Example: <color=orange>string _title = GetTermText(</color><color=cyan>" + script.EnumFieldName+ "</color><color=orange>.gps_disabled.ToString());</color>", style);

			EditorGUILayout.Space(10f);


			if (GUILayout.Button("Read Json file - Override"))
			{
				Debug.Log(script.EnumFieldName);
                if (string.IsNullOrWhiteSpace(script.EnumFieldName))
                {
                    if (EditorUtility.DisplayDialog("Empty EnumFieldName",
                "Write a name for the generated enum for keys", "CANCEL"))
                    {
                    }
                    return;
                }
                else
                {
					List<JsonTermsDatabase> classes = EditorUtils.GetAllInstances<JsonTermsDatabase>();
					
					foreach (JsonTermsDatabase jdb in classes)
					{
						if (jdb != script)
						{
							if (jdb.EnumFieldName == script.EnumFieldName)
							{
								Debug.Log("script.EnumFieldName EXISTS");
								if (EditorUtility.DisplayDialog("Same EnumFieldName Found",
					"The same enum name already exists. Create a new name", "CANCEL"))
								{
								}
								return;
							}
						}
					}

				}

                if (EditorUtility.DisplayDialog("Retrieve data from json file",
				"All items and changes will be overridden!", "Read", "Abort"))
				{
					script.ReadJsonFilesOverridde();
					SaveChanges();
				}
			}

			EditorGUILayout.Space(10f);

            GUILayout.Label("Cells are separated with \"-\"", style);
            if (GUILayout.Button("Export to CSV"))
			{
                if (EditorUtility.DisplayDialog("About to create CSV file.",
                "If any file exists in directory will be overriden!", "Create", "Abort"))
                {
                    script.CreateCSV();
                }
            }


            if (EditorGUI.EndChangeCheck())
            {
                serializedObject.ApplyModifiedProperties();
            }
        }

		public void SaveChanges()
		{
			Debug.Log(script.name + " Saved!");
			EditorUtility.SetDirty(script);
			AssetDatabase.SaveAssets();
			AssetDatabase.Refresh();
		}

	}
#endif
}
