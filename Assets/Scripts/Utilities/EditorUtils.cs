//Diadrasis ©2023 - Stathis Georgiou
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace Diadrasis.Rethymno 
{

    public class EditorUtils : MonoBehaviour
    {
#if UNITY_EDITOR
        public static void CreateEnumsFile(string filename, string _namespace, List<string> _values)
        {
            string enumName = filename;
            string _path = "Assets/Scripts/Enums/AutoGenerated/";
            if (!Directory.Exists(_path)) Directory.CreateDirectory(_path);
            string filePathAndName = _path + enumName + ".cs"; //The folder Scripts/Enums/ is expected to exist

            Debug.Log("Namespace: "+_namespace);

            using (StreamWriter streamWriter = new StreamWriter(filePathAndName))
            {
                streamWriter.WriteLine("//Diadrasis ©2023 - Stathis Georgiou\t");
                streamWriter.WriteLine("//Auto generated from json messages db read\t\t");
                streamWriter.WriteLine("namespace "+ _namespace);
                streamWriter.WriteLine("{");
                streamWriter.WriteLine();

                streamWriter.WriteLine("\tpublic enum " + enumName);
                streamWriter.WriteLine("\t{");
                for (int i = 0; i < _values.Count; i++)
                {
                    if (i == _values.Count - 1)
                    {
                        streamWriter.WriteLine("\t\t" + _values[i]);
                    }
                    else
                    {
                        streamWriter.WriteLine("\t\t" + _values[i] + ",");
                    }
                }
                streamWriter.WriteLine("\t}");

                streamWriter.WriteLine();
                streamWriter.WriteLine("}");
                streamWriter.Close();
            }
            AssetDatabase.Refresh();
        }


        //public static T[] GetAllInstances<T>() where T : ScriptableObject
        //{
        //    string[] guids = AssetDatabase.FindAssets("t:" + typeof(T).Name);  //FindAssets uses tags check documentation for more info
        //    T[] a = new T[guids.Length];
        //    for (int i = 0; i < guids.Length; i++)         //probably could get optimized 
        //    {
        //        string path = AssetDatabase.GUIDToAssetPath(guids[i]);
        //        a[i] = AssetDatabase.LoadAssetAtPath<T>(path);
        //    }

        //    return a;

        //}

        /// <summary>
        /// Get all instances of scriptable objects with given type.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public static List<T> GetAllInstances<T>() where T : ScriptableObject
        {
            return AssetDatabase.FindAssets($"t: {typeof(T).Name}").ToList()
                        .Select(AssetDatabase.GUIDToAssetPath)
                        .Select(AssetDatabase.LoadAssetAtPath<T>)
                        .ToList();
        }
#endif

    }


}
